<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Enabler_SIP_Publication_Client_User_Guide.ent">%BOOK_ENTITIES;]>

<chapter id="using_the_enabler">

	<title>Using
		the &THIS.PLATFORM;
		JAIN SLEE &THIS.ENABLER;
		Enabler
	</title>

	<para>In the last chapter we integrated the Enabler in the JAIN SLEE
		Service's Sbb, the Parent Sbb, in this chapter it is explained how to
		use the Enabler's Sbb, the Child Sbb.</para>
	<para>Enabler performs following tasks:</para>
	<variablelist>
		<varlistentry>
			<term>manage publication</term>
			<listitem>
				<para>send publication events on behalf of Parent Sbb</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>automatic refresh</term>
			<listitem>
				<para>based on values exchanged between Enabler and Server,
					Enabler keeps track of publication life time(expiration)
					and issues
					refresh requests to Server</para>
			</listitem>
		</varlistentry>

	</variablelist>
	<mediaobject>
		<imageobject>
			<imagedata width="300px" align="center" fileref="images/interactions1.png"
				format="PNG" />
		</imageobject>
		<caption>
			<para>JAIN
				SLEE &THIS.ENABLER;
				Enabler control flow
			</para>
		</caption>
	</mediaobject>

	<section id="the_child_sbblocalobject_interface">

		<title>The Child's SbbLocalObject Interface</title>

		<para>The &THIS.PLATFORM;
			JAIN SLEE &THIS.ENABLER;
			Enabler Sbb, the Child Sbb, implements the
			<literal>org.mobicents.slee.enabler.sip.PublicationClientChildSbbLocalObject
			</literal>
			, which extends the
			<literal>org.mobicents.slee.SbbLocalObjectExt</literal>
			and
			<literal>org.mobicents.slee.enabler.sip.PublicationClientChild
			</literal>
			interfaces, the latter declares the methods which can be used to
			interact with the Server:
		</para>

		<programlisting language="Java" role="JAVA"><![CDATA[
package org.mobicents.slee.enabler.sip;

public interface PublicationClientChild {
	
	public void newPublication(String entity, String eventPackage, String document, String contentType, 
		String contentSubType, int expires);

	public void modifyPublication(String document, String contentType
		, String contentSubType, int expires);

	public void removePublication();

	public String getEntity();

	public String getETag();

}
		]]>
		</programlisting>

		<variablelist>

			<varlistentry>
				<term>
					The
					<literal>String getETag()</literal>
					method:
				</term>
				<listitem>
					<para>Fetches last SIP-ETag value returned by Server.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>
					The
					<literal>String getEntity()</literal>
					method:
				</term>
				<listitem>
					<para>Fetches entity for which Enabler manages publication.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>
					The
					<literal>newPublication(String entity, String eventPackage, String
						document, String contentType, String contentSubType, int expires);
					</literal>
					method:
				</term>
				<listitem>
					<para>
						Creates new publication in Server.
						<literal>PUBLISH</literal>
						request is constructed with passed arguments.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>
					The
					<literal>modifyPublication(String document, String
						contentType, String contentSubType, int expires);</literal>
					method:
				</term>
				<listitem>
					<para>
						Issues modify
						<literal>PUBLISH</literal>
						request. Request is constructed with data passed as arguments and
						state stored
						when
						<literal>new</literal>
						publication is sent to server(event package, entity, ETag).
					</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>
					The
					<literal>removePublication();</literal>
					method:
				</term>
				<listitem>
					<para>
						Issues remove
						<literal>PUBLISH</literal>
						request. Request is constructed with data passed as arguments and
						state stored
						when previous publications are sent to server (event
						package, entity,
						ETag).
					</para>
				</listitem>
			</varlistentry>

		</variablelist>

	</section>

	<section id="creating_and_retrieving_the_child_sbb">
		<title>Creating And Retrieving The Child Sbb</title>
		<para>The Child Relation in the Parent Sbb Abstract Class is used to
			create and retrieve the Child Sbb:</para>
		<programlisting language="Java" role="JAVA"><![CDATA[
	PublicationClientChildSbbLocalObject sbb = null;
    // creation
    try {
        sbb = (PublicationClientChildSbbLocalObject) getSipPublicationClientChildRelation().create(childName);                
    }
    catch (Exception e) {
      tracer.severe("Failed to create child sbb", e);      
    }
    // retrieval
    try {
        sbb = (PublicationClientChildSbbLocalObject) getSipPublicationClientChildRelation().get(childName);                
    }
    catch (Exception e) {
      tracer.severe("Failed to retrieve child sbb", e);      
    }]]>
		</programlisting>		
	</section>
	<section id="configuring_child_sbb">
		<title>Enabler configuration</title>
		<para>
			Enabler can be configured with
			<acronym>SLEE</acronym>
			environment entries. Currently following entries are supported:
		</para>
		<table frame="all" pgwide="1">
			<title>Environment entry table
			</title>
			<tgroup colsep="1" cols="3">
				<colspec colnum="1" colname="c0" colwidth="2*" />
				<colspec colnum="2" colname="c1" colwidth="3*" />
				<colspec colnum="3" colname="c2" colwidth="3*" />
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<para>server.address
							</para>
						</entry>
						<entry>
							<para>java.lang.String
							</para>
						</entry>
						<entry>
							<para>Specifies address to which requests should be forwarded. It has form of ip:port pair.
							</para>
						</entry>
					</row>
					<row>
						<entry>
							<para>expires.drift
							</para>
						</entry>
						<entry>
							<para>java.lang.Integer
							</para>
						</entry>
						<entry>
							<para>Specifies time drift, in seconds, between value of Expires/Min-Expires values and automatic refresh performed by enabler. For instance if Expires value passed(and accepted by ECS/PA)
							is 3600, time drift set to 10, Enabler will refresh publication after 3590 seconds
							</para>
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>



</chapter>

