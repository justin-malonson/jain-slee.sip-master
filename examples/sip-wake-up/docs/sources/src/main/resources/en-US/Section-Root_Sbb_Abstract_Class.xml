<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Example_User_Guide.ent">
%BOOK_ENTITIES;
]>

<section id="root_sbb_abstract_class">
			<title>The Root SBB Abstract Class</title>
			<para> The class <literal>org.mobicents.slee.examples.wakeup.WakeupSbb</literal> includes all the service logic for the example.</para>
		
			<section id="root_sbb_abstract_class_setSbbContext">
				<title>The setSbbContext(SbbContext) method</title>
				<para>The <literal>javax.slee.SbbObject</literal>'s <literal>setSbbContext(SbbContext)</literal> is used by SBBs to store the SBB's context into a class field. The SBB should take the opportunity to also store objects, such as SLEE facilities, which are reused by all service logic entities, a.k.a. SbbEntities, and are stored in the JNDI environment.</para>
            	
            	<para>The class fields and <literal>setSbbContext(SbbContext)</literal> method's and related code:</para>
            	<programlisting language="Java" role="JAVA"><![CDATA[
	// the Sbb's context
	private SbbContext sbbContext; 
	
	// the Sbb's single tracer
	private Tracer tracer = null; 
		
	// cached objects in Sbb's environment, lookups are expensive
	private SleeSipProvider sipProvider;
	private TimerFacility timerFacility;
	private NullActivityContextInterfaceFactory nullACIFactory;
	private NullActivityFactory nullActivityFactory;
	
	/*
	 * (non-Javadoc)
	 * 
	 * @see javax.slee.Sbb#setSbbContext(javax.slee.SbbContext)
	 */
	public void setSbbContext(SbbContext context) {
		// save the sbb context in a field
		this.sbbContext = context;
		// get the tracer if needed
		this.tracer = context.getTracer(WakeUpSbb.class.getSimpleName());
		// get jndi environment stuff
		try {
			final Context myEnv = (Context) new InitialContext();
			// slee facilities
			this.timerFacility = (TimerFacility) myEnv
					.lookup(TimerFacility.JNDI_NAME);
			this.nullACIFactory = (NullActivityContextInterfaceFactory) myEnv
					.lookup(NullActivityContextInterfaceFactory.JNDI_NAME);
			this.nullActivityFactory = (NullActivityFactory) myEnv
					.lookup(NullActivityFactory.JNDI_NAME);
			// the sbb interface to interact with SIP resource adaptor
			this.sipProvider = (SleeSipProvider) myEnv
					.lookup("java:comp/env/slee/resources/jainsip/1.2/provider");
		} catch (Exception e) {
			tracer.severe("Failed to set sbb context", e);
		}
	}
            	]]>
            	</programlisting>
        	</section>
        
        	<section id="root_sbb_abstract_class_cmp_fields_acccessors">
				<title>CMP Fields Accessors</title>
				<para>For each CMP field, which will hold the service logic instance data, the application defines two abstract methods, the getter and the setter. SLEE is responsible for the implementation of those methods.</para>
            	
            	<para>The CMP field's accessors code:</para>
            	<programlisting language="Java" role="JAVA"><![CDATA[
	public abstract void setSender(Address sender);
	public abstract Address getSender();
	
	public abstract void setCallId(CallIdHeader callId);
	public abstract CallIdHeader getCallId();
	
	public abstract void setBody(String body);
	public abstract String getBody();
            	]]>
            	</programlisting>
        	</section>
        	
			<section id="root_sbb_abstract_class_message_event_handler">
				<title>The SIP MESSAGE event handler</title>
				<para>The SIP MESSAGE is the starting point of each instance of the service logic, its responsibility is:</para>
				
				<itemizedlist>
					<listitem>
				        <para>Extract the relevant message information and store in CMP fields, the correct place holders for service logic instance data event handler is the entry point.</para>
	   				</listitem>
	   				<listitem>
				        <para>Set the timer with the duration extract from the SIP MESSAGE request on a new Null Activity, needed to keep the service logic instance alive. Recall that SLEE garbage collects all SBBEntities which are not attached to a single ActivityContext, and at this point the entity is only attached to the SIP ServerTransaction activity, that is goin to end once the application returns a final response.</para>
	   				</listitem>
	   				<listitem>
				        <para>Reply the successful processing of the SIP request.</para>
	   				</listitem>
				</itemizedlist>
            	
            	<para>The event handler code:</para>
            	<programlisting language="Java" role="JAVA"><![CDATA[
	/**
	 * Event handler for the SIP MESSAGE from the UA
	 * 
	 * @param event
	 * @param aci
	 */
	public void onMessageEvent(javax.sip.RequestEvent event,
			ActivityContextInterface aci) {

		final Request request = event.getRequest();
		try {
			// message body should be *FIRST_TOKEN<timer value in
			// seconds>MIDDLE_TOKEN<msg to send back to UA>LAST_TOKEN*
			final String body = new String(request.getRawContent());
			final int firstTokenStart = body.indexOf(FIRST_TOKEN);
			final int timerDurationStart = firstTokenStart + FIRST_TOKEN_LENGTH;
			final int middleTokenStart = body.indexOf(MIDDLE_TOKEN,
					timerDurationStart);
			final int bodyMessageStart = middleTokenStart + MIDDLE_TOKEN_LENGTH;
			final int lastTokenStart = body.indexOf(LAST_TOKEN,
					bodyMessageStart);
			if (firstTokenStart > -1 && middleTokenStart > -1
					&& lastTokenStart > -1) {
				// extract the timer duration
				final int timerDuration = Integer.parseInt(body.substring(
						timerDurationStart, middleTokenStart));
				// create a null AC and attach the sbb local object
				final ActivityContextInterface timerACI = this.nullACIFactory
						.getActivityContextInterface(this.nullActivityFactory
								.createNullActivity());
				timerACI.attach(sbbContext.getSbbLocalObject());
				// set the timer on the null AC, because the one from this event
				// will end as soon as we send back the 200 ok
				this.timerFacility.setTimer(timerACI, null, System
						.currentTimeMillis()
						+ (timerDuration * 1000), new TimerOptions());
				// extract the body message
				final String bodyMessage = body.substring(bodyMessageStart,
						lastTokenStart);
				// store it in a cmp field
				setBody(bodyMessage);
				// do the same for the call id
				setCallId((CallIdHeader) request.getHeader(CallIdHeader.NAME));
				// also store the sender's address, so we can send the wake up
				// message
				final FromHeader fromHeader = (FromHeader) request
						.getHeader(FromHeader.NAME);
				if (tracer.isInfoEnabled()) {
					tracer.info("Received a valid message from "
							+ fromHeader.getAddress()
							+ " requesting a reply containing '" + bodyMessage
							+ "' after " + timerDuration + "s");
				}
				setSender(fromHeader.getAddress());
				// finally reply to the SIP message request
				sendResponse(event, Response.OK);
			} else {
				// parsing failed
				tracer.warning("Invalid msg '" + body + "' received");
				sendResponse(event, Response.BAD_REQUEST);
			}
		} catch (Throwable e) {
			// oh oh something wrong happened
			tracer.severe("Exception while processing MESSAGE", e);
			try {
				sendResponse(event, Response.SERVER_INTERNAL_ERROR);
			} catch (Exception f) {
				tracer.severe("Exception while sending SERVER INTERNAL ERROR",
						f);
			}
		}
	}
            	]]>
				</programlisting>
			</section>
		
			<section id="root_sbb_abstract_class_child_relation_getter">
				<title>Location Service SBB Child Relation</title>
				<para>The SBB uses SIP JDBC Registrar's to retrieve the URIs of all entities registered with the target address, the child relation method is an abstract class that SLEE implements.</para>
            	
            	<para>The child relation's getter code:</para>
            	<programlisting language="Java" role="JAVA"><![CDATA[
	/**
	 * Child relation to the location service
	 * @return
	 */
	public abstract ChildRelation getLocationChildRelation();
            	]]>
            	</programlisting>
        	</section>
        	
        	<section id="root_sbb_abstract_class_timer_event_handler">
				<title>The TimerEvent handler</title>
				<para>The JAIN SLEE TimerEvent handler is invoked when the duration requested by the SIP Message has passed, and its responsibility is:</para>
				
				<itemizedlist>
					<listitem>
				        <para>Create the child SBB and ask for the message target's registered URIs.</para>
	   				</listitem>
				</itemizedlist>
            	
            	<para>The event handler code:</para>
            	<programlisting language="Java" role="JAVA"><![CDATA[
	/**
	 * Event handler from the timer event, which signals that a message must be
	 * sent back to the UA
	 * 
	 * @param event
	 * @param aci
	 */
	public void onTimerEvent(TimerEvent event, ActivityContextInterface aci) {
		// detaching so the null AC is claimed after the event handling
		aci.detach(sbbContext.getSbbLocalObject());
		try {
			// create child
			DataSourceChildSbbLocalInterface child = (DataSourceChildSbbLocalInterface) getLocationChildRelation().create();
			// request bindings of the message target
			child.getBindings(getSender().getURI().toString());
		} catch (Exception e) {
			tracer.severe("failed to create sip registrar child sbb, to lookup the sender's contacts",e);
			return;
		}
	}
            	]]>
				</programlisting>
			</section>
			
			<section id="root_sbb_abstract_class_registrar_callback">
				<title>The Child's SBB Callback</title>
				<para>The Child SBB provides the registration bindings result asynchronously through a callback, it is the final "piece" of the service instance logic, and its responsibility is:</para>
				
				<itemizedlist>
					<listitem>
				        <para>Retrieve all data needed to compose the SIP MESSAGE from CMP fields.</para>
	   				</listitem>	   				
	   				<listitem>
				        <para>Send the wake up message(s).</para>
	   				</listitem>
				</itemizedlist>
            	
            	<para>The callback method code:</para>
            	<programlisting language="Java" role="JAVA"><![CDATA[
	public void getBindingsResult(int resultCode, List<RegistrationBinding> bindings) {
		if (resultCode < 300) {
			// get data from cmp fields
			String body = getBody();
			CallIdHeader callId = getCallId();
			Address sender = getSender();
			try {
				// create headers needed to create a out-of-dialog request
				AddressFactory addressFactory = sipProvider.getAddressFactory();
				Address fromNameAddress = addressFactory
						.createAddress("sip:wakeup@restcomm.com");
				fromNameAddress.setDisplayName("Wake Up Service");
				HeaderFactory headerFactory = sipProvider.getHeaderFactory();
				FromHeader fromHeader = headerFactory.createFromHeader(
						fromNameAddress, null);
				List<ViaHeader> viaHeaders = new ArrayList<ViaHeader>(1);
				ListeningPoint listeningPoint = sipProvider.getListeningPoints()[0];
				ViaHeader viaHeader = sipProvider.getHeaderFactory()
						.createViaHeader(listeningPoint.getIPAddress(),
								listeningPoint.getPort(),
								listeningPoint.getTransport(), null);
				viaHeaders.add(viaHeader);
				ContentTypeHeader contentTypeHeader = headerFactory
						.createContentTypeHeader("text", "plain");
				CSeqHeader cSeqHeader = headerFactory.createCSeqHeader(2L,
						Request.MESSAGE);
				MaxForwardsHeader maxForwardsHeader = headerFactory
						.createMaxForwardsHeader(70);
				
				// send a message to each contact of the target resource
				MessageFactory messageFactory = sipProvider.getMessageFactory();
				for (RegistrationBinding registration : bindings) {
					try {
						// create request uri
						URI requestURI = addressFactory.createURI(registration
								.getContactAddress());
						// create to header
						ToHeader toHeader = headerFactory.createToHeader(sender,
								null);
						// create request
						Request request = messageFactory.createRequest(requestURI,
								Request.MESSAGE, callId, cSeqHeader, fromHeader,
								toHeader, viaHeaders, maxForwardsHeader,
								contentTypeHeader, body);
						// create client transaction and send request
						ClientTransaction clientTransaction = sipProvider
								.getNewClientTransaction(request);
						clientTransaction.sendRequest();
					} catch (Throwable f) {
						tracer.severe("Failed to create and send message", f);
					}
				}
			} catch (Throwable e) {
				tracer.severe("Failed to create message headers", e);
			}
		}
		else {
			tracer.severe("Unable to send wake up message, the SIP Registrar did 
				not retrieved the target bindings with sucess");
		}		
	}
            	]]>
				</programlisting>
			</section>
			
		</section>	